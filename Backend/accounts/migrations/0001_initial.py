# Generated by Django 4.2.7 on 2025-09-27 16:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('citizen', 'Citizen'), ('voter', 'Voter'), ('candidate', 'Candidate'), ('voter_official', 'Voter Official'), ('electoral_commission', 'Electoral Commission')], default='citizen', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('national_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('is_biometric_registered', models.BooleanField(default=False)),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('ethereum_address', models.CharField(blank=True, max_length=42, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-registration_date'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VoterProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voter_id', models.CharField(max_length=20, unique=True)),
                ('polling_station', models.CharField(blank=True, max_length=100, null=True)),
                ('constituency', models.CharField(blank=True, max_length=100, null=True)),
                ('voter_card_issued', models.BooleanField(default=False)),
                ('voter_card_number', models.CharField(blank=True, max_length=20, null=True)),
                ('registration_completed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registered_voters', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='voter_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'voter_profiles',
            },
        ),
        migrations.CreateModel(
            name='VoterOfficialProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('official_id', models.CharField(max_length=20, unique=True)),
                ('assigned_region', models.CharField(blank=True, max_length=100, null=True)),
                ('registration_center', models.CharField(blank=True, max_length=100, null=True)),
                ('appointment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('appointed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointed_officials', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='voter_official_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'voter_official_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('vote_cast', 'Vote Cast'), ('profile_update', 'Profile Update'), ('biometric_auth', 'Biometric Authentication'), ('election_created', 'Election Created'), ('candidate_approved', 'Candidate Approved'), ('voter_registered', 'Voter Registered')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_activities',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ElectoralCommissionProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission_id', models.CharField(max_length=20, unique=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('jurisdiction', models.CharField(blank=True, max_length=100, null=True)),
                ('appointment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('term_end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='electoral_commission_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'electoral_commission_profiles',
            },
        ),
        migrations.CreateModel(
            name='CitizenProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('education_level', models.CharField(blank=True, max_length=50, null=True)),
                ('voter_pre_enrollment_date', models.DateTimeField(blank=True, null=True)),
                ('voter_pre_enrollment_status', models.CharField(choices=[('not_applied', 'Not Applied'), ('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='not_applied', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='citizen_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'citizen_profiles',
            },
        ),
        migrations.CreateModel(
            name='CandidateProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate_id', models.CharField(max_length=20, unique=True)),
                ('political_party', models.CharField(blank=True, max_length=100, null=True)),
                ('campaign_slogan', models.CharField(blank=True, max_length=200, null=True)),
                ('manifesto', models.TextField(blank=True, null=True)),
                ('application_status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('disqualified', 'Disqualified')], default='pending', max_length=20)),
                ('application_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_candidates', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'candidate_profiles',
            },
        ),
        migrations.CreateModel(
            name='BiometricData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('face_encoding', models.JSONField(blank=True, null=True)),
                ('face_image_path', models.CharField(blank=True, max_length=255, null=True)),
                ('fingerprint_template', models.JSONField(blank=True, null=True)),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_verified', models.BooleanField(default=False)),
                ('registered_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registered_biometrics', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'biometric_data',
            },
        ),
    ]
